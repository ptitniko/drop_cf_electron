/**
 * Script de test pour valider les am√©liorations de robustesse du hotfolder
 * Usage: node test-robustesse.js
 */

const fs = require('fs-extra');
const path = require('path');

// Configuration de test
const TEST_CONFIG = {
  hotfolderPath: './hotfolder',
  testImagePath: './test-image.jpg',
  testLargeImagePath: './test-large-image.jpg'
};

console.log('üß™ Tests de Robustesse du Hotfolder');
console.log('=====================================\n');

/**
 * Test 1: V√©rification de la stabilit√© des fichiers
 */
async function testFileStability() {
  console.log('üìã Test 1: Stabilit√© des fichiers');
  
  try {
    const { FileStabilityChecker } = require('./main/file-stability');
    const checker = new FileStabilityChecker(2000, 500); // 2s avec v√©rifications toutes les 500ms
    
    // Cr√©er un fichier de test
    const testFile = path.join(TEST_CONFIG.hotfolderPath, 'test-stability.jpg');
    await fs.ensureDir(TEST_CONFIG.hotfolderPath);
    
    // Simuler un fichier en cours d'√©criture
    console.log('  ‚è≥ Simulation d\'un fichier en cours d\'√©criture...');
    const writer = fs.createWriteStream(testFile);
    
    // √âcrire progressivement
    setTimeout(() => writer.write('data1'), 100);
    setTimeout(() => writer.write('data2'), 600);
    setTimeout(() => writer.write('data3'), 1100);
    setTimeout(() => writer.end(), 1600);
    
    // Tester la stabilit√©
    const startTime = Date.now();
    const isReady = await checker.checkFileReadiness(testFile, (msg) => console.log(`    ${msg}`));
    const duration = Date.now() - startTime;
    
    console.log(`  ‚úÖ Fichier ${isReady ? 'stable' : 'non stable'} apr√®s ${duration}ms`);
    
    // Nettoyer
    await fs.remove(testFile);
    
  } catch (error) {
    console.log(`  ‚ùå Erreur: ${error.message}`);
  }
  
  console.log('');
}

/**
 * Test 2: Syst√®me de timeout
 */
async function testTimeoutManager() {
  console.log('üìã Test 2: Syst√®me de timeout');
  
  try {
    const { ProcessingTimeoutManager } = require('./main/processing-timeout');
    const manager = new ProcessingTimeoutManager(3000); // 3 secondes pour le test
    
    manager.initialize({ folders: { ERROR: './error' } }, (msg) => console.log(`    ${msg}`));
    
    // Cr√©er un fichier de test
    const testFile = path.join('./error', 'test-timeout.jpg');
    await fs.ensureDir('./error');
    await fs.writeFile(testFile.replace('./error', './'), 'test data');
    
    console.log('  ‚è≥ D√©marrage du suivi avec timeout de 3s...');
    manager.startTracking('test-processing-123', 'test-timeout.jpg', testFile.replace('./error', './'));
    
    // Attendre le timeout
    await new Promise(resolve => setTimeout(resolve, 4000));
    
    // V√©rifier les stats
    const stats = manager.getStats();
    console.log(`  üìä Statistiques: ${stats.activeCount} actifs`);
    
    // Nettoyer
    manager.forceStopAll();
    await fs.remove('./error').catch(() => {});
    
    console.log('  ‚úÖ Test de timeout termin√©');
    
  } catch (error) {
    console.log(`  ‚ùå Erreur: ${error.message}`);
  }
  
  console.log('');
}

/**
 * Test 3: Polling adaptatif
 */
async function testAdaptivePoller() {
  console.log('üìã Test 3: Polling adaptatif');
  
  try {
    const { AdaptivePoller } = require('./main/adaptive-poller');
    const poller = new AdaptivePoller(1000, 5000); // 1s √† 5s
    
    console.log('  ‚è≥ Test des intervalles adaptatifs...');
    
    // Simuler des succ√®s
    for (let i = 0; i < 3; i++) {
      poller.onSuccess();
      const interval = poller.getNextInterval();
      console.log(`    Succ√®s ${i + 1}: intervalle = ${interval}ms`);
    }
    
    // Simuler des erreurs
    for (let i = 0; i < 3; i++) {
      poller.onError();
      const interval = poller.getNextInterval();
      console.log(`    Erreur ${i + 1}: intervalle = ${interval}ms`);
    }
    
    // Afficher les stats
    const stats = poller.getStats();
    console.log(`  üìä Stats: ${stats.totalPolls} polls, ${stats.errorRate}% erreurs, statut: ${stats.status}`);
    
    console.log('  ‚úÖ Test de polling adaptatif termin√©');
    
  } catch (error) {
    console.log(`  ‚ùå Erreur: ${error.message}`);
  }
  
  console.log('');
}

/**
 * Test 4: Int√©gration compl√®te
 */
async function testIntegration() {
  console.log('üìã Test 4: Int√©gration compl√®te');
  
  try {
    // V√©rifier que tous les modules sont bien export√©s
    const hotfolder = require('./main/hotfolder');
    const watcher = require('./main/watcher');
    
    console.log('  ‚úÖ Module hotfolder charg√©');
    console.log('  ‚úÖ Module watcher charg√©');
    
    // V√©rifier les exports
    if (typeof hotfolder.initializeManagers === 'function') {
      console.log('  ‚úÖ initializeManagers disponible');
    } else {
      console.log('  ‚ùå initializeManagers manquant');
    }
    
    if (typeof watcher.startWatcher === 'function') {
      console.log('  ‚úÖ startWatcher disponible');
    } else {
      console.log('  ‚ùå startWatcher manquant');
    }
    
    console.log('  ‚úÖ Test d\'int√©gration termin√©');
    
  } catch (error) {
    console.log(`  ‚ùå Erreur: ${error.message}`);
  }
  
  console.log('');
}

/**
 * Ex√©cution des tests
 */
async function runTests() {
  console.log('üöÄ D√©marrage des tests...\n');
  
  await testFileStability();
  await testTimeoutManager();
  await testAdaptivePoller();
  await testIntegration();
  
  console.log('‚úÖ Tous les tests termin√©s !');
  console.log('\nüìù Pour tester en conditions r√©elles :');
  console.log('   1. D√©marrez l\'application: npm start');
  console.log('   2. Copiez un gros fichier dans le hotfolder pendant qu\'il se copie');
  console.log('   3. Observez les logs pour voir la v√©rification de stabilit√©');
  console.log('   4. Testez avec des pannes r√©seau simul√©es');
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testFileStability,
  testTimeoutManager,
  testAdaptivePoller,
  testIntegration,
  runTests
};
